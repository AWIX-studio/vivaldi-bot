import telebot
import os
import requests
import source.bpm_detect
from dotenv import load_dotenv
from telebot import types

# neural-stem-slicer
import neuralStemSlicer.step1_BPMAnalysis
import neuralStemSlicer.step2_KeyAnalysis

load_dotenv()
bot = telebot.TeleBot(str(os.getenv('BOT_TOKEN')))
telebot.apihelper.delete_webhook(bot.token)
DOWNLOAD_FOLDER = os.path.join(os.path.dirname(__file__), "Audio")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
user_last_messages = {}

# –ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —É–º–Ω–∏–∫ —É–¥–∞–ª–∏—Ç –ø–∞–ø–∫—É
if not os.path.exists(DOWNLOAD_FOLDER):
    os.makedirs(DOWNLOAD_FOLDER)

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def start(message):
    
    bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç. –Ø –í–∏–≤–∞–ª—å–¥–∏ –±–æ—Ç. –Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –Ω–µ–º–Ω–æ–≥–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ç–µ–±–µ —Ä–∞–±–æ—Ç—É —Å –º—É–∑—ã–∫–æ–π. –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏ —è —Å–∫–∞–∂—É, —á—Ç–æ —è –º–æ–≥—É —Å –Ω–∏–º —Å–¥–µ–ª–∞—Ç—å (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º –º–æ–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º).')


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == '/help':
        bot.send_message(message.from_user.id, 'Coming soon...')
 
# –†–µ–∞–∫—Ü–∏—è –±–æ—Ç–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_button_click(call):
    if call.data == 'StemSlice':
        bot.send_message(call.message.chat.id, "–ü–æ–Ω")
    if call.data == 'Pitch':
        bot.send_message(call.message.chat.id, "–ê –≤ —Ä–æ–∂—É –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —Ö–æ—á–µ—à—å?")

# –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
@bot.message_handler(content_types=['audio'])
def handle_audio(message):
    
    try:
        file_id = message.audio.file_id
        file_name = message.audio.file_name or "audio_file.mp3"
        chat_id = message.chat.id

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_info = bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"
        
        response = requests.get(file_url, stream=True)
        if response.status_code != 200:
            raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
        bot.send_message(message.from_user.id, '–ü–æ–ª—É—á–∏–ª —Ç–≤–æ–π —Ñ–∞–π–ª. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...')
        file_path = os.path.join(DOWNLOAD_FOLDER, file_name)
        with open(file_path, 'wb') as f:
            f.write(response.content)
        
        # –ê–Ω–∞–ª–∏–∑ BPM
        """
        try:
            bpm = source.bpm_detect.BPM_Detector(file_path).tempo
            if bpm > 100:
                bpm_value = f'{round(float(bpm))}'
            else:
                bpm_value = f"{round(float(bpm))} ({round(float(bpm) * 2)})"
            bot.reply_to(message, f"üéµ BPM —Ç—Ä–µ–∫–∞: {bpm_value}")
            
        except Exception as e:
            bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        """
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Ç neuralStemSlicer
        try:
            # BPM
            y, sr = neuralStemSlicer.step1_BPMAnalysis.detect_y_sr(file_path)
            bpm = neuralStemSlicer.step1_BPMAnalysis.detect_bpm(y, sr, file_path)[0]
            
            # Key
            key = neuralStemSlicer.step2_KeyAnalysis.detect_key(file_path)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('–†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –¥–æ—Ä–æ–∂–∫–∞–º', callback_data='StemSlice'))
            markup.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø–∏—Ç—á', callback_data='Pitch'))

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if chat_id in user_last_messages:
                try:
                    bot.delete_message(chat_id, user_last_messages[chat_id])
                except:
                    pass
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–∞–π–ª —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            msg = bot.reply_to(message, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ—ë–º —Ñ–∞–π–ª–µ \n\nBPM: {bpm} \nKey: {key[0][1]}\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å –Ω–∏–º?", reply_markup=markup)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_last_messages[chat_id] = msg.message_id

        except Exception as e:
            bot.reply_to(message, f'–æ—à–∏–±–∫–∞: {str(e)}')

    except Exception as e:
        bot.reply_to(message, f"üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)

bot.polling(none_stop=True, interval=0)
